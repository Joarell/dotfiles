# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal xterm-256color

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Create splits and vertical splits
bind-key v split-window -h -p 50 -c "#{pane_current_path}"
bind-key ^V split-window -h -p 50 -c "#{pane_current_path}"
bind-key s split-window -p 50 -c "#{pane_current_path}"
bind-key ^S split-window -p 50 -c "#{pane_current_path}"

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
"bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pip-and-cancel
bind-key P paste-buffer
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pip-and-cancel
bind-key = set-window-option synchronize-panes


# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-window-option -g mouse on

# color scheme (styled as vim-powerline)
tmux_conf_theme_right_separator_main='\uE0CF'
set -g status-left-length 52
set -g status-right-length 451
set -g status-style fg=white,bg=default
set -g pane-border-style fg=colour245
set -g pane-active-border-style fg=colour55
set -g message-style fg=colour16,bg=colour221,bold
set -g pane-border-status off
# set -g pane-border-format '#[fg=black]'\uE0B6'#[fg=green,bg=black,bold] #P '\uE7C5' #T #[fg=colour252,bg=black,nobold]#(gitmux -cfg .gitmux.conf "#{pane_current_path}")#[fg=black]'\uE0B4''
set -g status-left '#[fg=colour252]'\uE0B6'#[fg=#343522,bg=colour252,bold] '\uE7C5' #S #[fg=colour252,bg=colour238,nobold]'\uE0B0'#[fg=colour245,bg=colour238,bold] '\uFAB4'#(whoami) #[fg=colour238,bg=colour234,nobold]'\uE0B0''
set -g status-right '#[fg=colour39]'\uE0B6'#[fg=colour235,bg=colour39,bold]'\uF303' #[fg=colour252,bg=black,nobold]#[fg=colour39]'\uE0B4' '\uE216' '\uF252' %H:%M:%S '\uE216' '\uEAB0' %d-%b-%y \
#[fg=colour238]'\uE0B6'#[fg=green,bg=colour238,nobold] '\uEB50' #(tmux-mem-cpu-load | cut -b 1-35)'\uF8EF' '\uF2C8'#(acpi -t | cut -b 15-19)°C '\uF85A' #[fg=colour238,bg=black]'\uE0B4'#[fg=colour39] \
'\uE0B6'#[fg=colour235,bg=colour39,bold] '\uEBC8' #P #[fg=colour252,bg=black,nobold]#[fg=colour39]'\uE0B4''
set -g window-status-format '#[fg=colour235,bg=colour252,bold]'\uE0B0'#I #(pwd="#{pane_current_path}"; echo ${pwd####*/}) #W #[fg=colour252,bg=colour234,nobold]'\uE0D2''\uE0D1''
# set -g window-status-current-format '#[fg=colour234,bg=colour39]'\uE0B0'#[fg=black,bg=colour39,noreverse,bold] #{?window_zoomed_flag,#[fg=colour228],} #I #(pwd="#{pane_current_path}"; echo ${pwd####*/}) #W #[fg=colour39,bg=colour234,nobold]#(gitmux -cfg .gitmux.conf "#{pane_current_path}")'\uE0D2''\uE0CE''
set -g window-status-current-format '#[fg=colour234,bg=colour39]'\uE0B0'#[fg=black,bg=colour39,noreverse,bold] #{?window_zoomed_flag,#[fg=colour228],} #I #(pwd="#{pane_current_path}"; echo ${pwd####*/}) #W #[fg=colour39,bg=colour234,nobold]#(gitmux -cfg .gitmux.conf "#{pane_current_path}")'\uE0D2''\uE0D1''
set-option -g status-interval 2
set -g status-position top
set -g default-terminal "${TERM}"

# Allow undercurls for terminals that support them.
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Allow coloured undercurls for terminals that support them.
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Screen like binding
unbind C-b
set -g prefix C-a
bind a send-prefix

# No escape time for vi mode
set -sg escape-time 0

# Screen like binding for last window
unbind l
bind C-a last-window

# Bigger history
set -g history-limit 10000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Fix key bindings broken in tmux 2.1
set -g assume-paste-time 0

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'
#-#-# start_of_ranger_tmux_config #-#-#
bind-key Bspace run-shell -b '/usr/bin/python -m ranger_tmux.drop'
#-#-# end_of_ranger_tmux_config #-#-#

#  ╭─────────────────────────────────────────────────────────────────────────╮
#  │ ======================= TMUX PLUGIN MANAGER =========================== │
#  ╰─────────────────────────────────────────────────────────────────────────╯
run '~/.tmux/plugins/tpm/tpm'

#  ╭─────────────────────────────────────────────────────────────────────────╮
#  │ ========================= TMUX RESURRECT ============================== │
#  ╰─────────────────────────────────────────────────────────────────────────╯
set -g @plugin 'tmux-plugins/tmux-resurrect'

set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
